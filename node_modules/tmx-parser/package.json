{
  "name": "tmx-parser",
  "version": "1.4.0",
  "description": "parse and load tiled maps",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/superjoe30/node-tmx-parser.git"
  },
  "author": {
    "name": "Andrew Kelley",
    "email": "superjoe30@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/superjoe30/node-tmx-parser/issues"
  },
  "dependencies": {
    "pend": "~1.2.0",
    "sax": "~1.1.2"
  },
  "devDependencies": {
    "mocha": "~2.3.0"
  },
  "readme": "# tmx parser\n\n[Tiled Map Editor](http://www.mapeditor.org/) map parser made to work\nin node.js or [browserify](http://browserify.org/).\n\n## Usage\n\n```js\nvar tmx = require('tmx-parser');\n\n// if you have a string (pathToFile is for resolving tilesets if necessary)\ntmx.parse(xmlString, pathToFile, function(err, map) {\n  if (err) throw err;\n  console.log(map);\n});\n\n// if you have a file\ntmx.parseFile(filename, function(err, map) {\n  if (err) throw err;\n  console.log(map);\n});\n```\n\nThe second example in that list uses `tmx.readFile(filename, callback)`\nand then calls `tmx.parse(...)` on the results.\nSo if you're in browserland, you can replace the `readFile` function\nwith your own asset loading function.\n\n## Documentation\n\nA parsed map looks something like this:\n\n```js\n{ version: '1.0',\n  orientation: 'orthogonal',\n  width: 200,\n  height: 100,\n  tileWidth: 16,\n  tileHeight: 16,\n  backgroundColor: undefined,\n  layers: \n   [ { map: [Object],\n       type: 'tile',\n       name: 'Tiles',\n       opacity: 1,\n       visible: true,\n       properties: {},\n       tiles: [Object],\n       horizontalFlips: [Object],\n       verticalFlips: [Object],\n       diagonalFlips: [Object] },\n     { map: [Object],\n       type: 'tile',\n       name: 'Ladders',\n       opacity: 1,\n       visible: true,\n       properties: {},\n       tiles: [Object],\n       horizontalFlips: [Object],\n       verticalFlips: [Object],\n       diagonalFlips: [Object] },\n     { type: 'object',\n       name: 'Objects',\n       color: undefined,\n       opacity: 1,\n       visible: true,\n       properties: {},\n       objects: [Object] },\n     { type: 'object',\n       name: 'PlayerLayer',\n       color: undefined,\n       opacity: 1,\n       visible: true,\n       properties: {},\n       objects: [] } ],\n  properties: \n   { bg_art: 'background.png',\n     bg_music: 'music/silly.mp3',\n     fg_art: 'hill.png' },\n  tileSets: \n   [ { firstGid: 1,\n       source: 'tiles.tsx',\n       name: 'default',\n       tileWidth: 16,\n       tileHeight: 16,\n       spacing: null,\n       margin: null,\n       tileOffset: [Object],\n       properties: {},\n       image: [Object],\n       tiles: [Object],\n       terrainTypes: [] } ] }\n```\n\nThe `objects` array looks like this:\n\n```js\n{ type: 'object',\n  name: 'Objects',\n  color: undefined,\n  opacity: 1,\n  visible: true,\n  properties: {},\n  objects: \n   [ { name: undefined,\n       type: 'Decoration',\n       x: 0,\n       y: 640,\n       width: 224,\n       height: 240,\n       rotation: 0,\n       properties: [Object],\n       gid: null,\n       visible: true,\n       ellipse: false,\n       polygon: null,\n       polyline: null },\n     { name: 'movement text',\n       type: 'Text',\n       x: 240,\n       y: 640,\n       width: 336,\n       height: 80,\n       rotation: 0,\n       properties: [Object],\n       gid: null,\n       visible: true,\n       ellipse: false,\n       polygon: null,\n       polyline: null },\n     { name: 'victory',\n       type: 'Victory',\n       x: 2976,\n       y: 880,\n       width: 224,\n       height: 96,\n       rotation: 0,\n       properties: {},\n       gid: null,\n       visible: true,\n       ellipse: false,\n       polygon: null,\n       polyline: null } ] }\n```\n\nTileLayer objects have a `tileAt(x, y)` method.\nOtherwise you can access `layer.tiles` in row-major order.\n\nSee the bottom of index.js for more information.\n",
  "readmeFilename": "README.md",
  "_id": "tmx-parser@1.4.0",
  "_from": "tmx-parser@^1.4.0"
}
